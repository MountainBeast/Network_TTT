// Fig. 27.13: TicTacToeServer.java
// Server side of client/server Tic-Tac-Toe program.
import java.awt.BorderLayout;
import java.net.ServerSocket;
import java.net.Socket;
import java.io.IOException;
import java.util.Formatter;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import javax.swing.JFrame;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.*;
public class TicTacToeServer extends JFrame 
{
   private String[] board = new String[ 9 ]; // tic-tac-toe board
   private JTextArea outputArea; // for outputting moves
   private Player[] players; // array of Players
   private ServerSocket server; // server socket to connect with clients
   private int currentPlayer; // keeps track of player with current move
   private final static int PLAYER_X = 0; // constant for first player
   private final static int PLAYER_O = 1; // constant for second player
   private final static String[] MARKS = { "X", "O" }; // array of marks
   private ExecutorService runGame; // will run players
   private Lock gameLock; // to lock game for synchronization
   private Condition otherPlayerConnected; // to wait for other player
   private Condition otherPlayerTurn; // to wait for other player's turn
  // to be put in ss
  //***Edited: Added booleans/attributes below*** - DKC
   private boolean matchWinner;
   private boolean matchDraw;
   private int winningPlayer; //for part D, working out kinks
// to be put in ss
   // set up tic-tac-toe server and GUI that displays messages
   public TicTacToeServer()
   {
      super( "Tic-Tac-Toe Server" ); // set title of window

      // create ExecutorService with a thread for each player
      runGame = Executors.newFixedThreadPool( 2 );
      gameLock = new ReentrantLock(); // create lock for game

      // condition variable for both players being connected
      otherPlayerConnected = gameLock.newCondition();

      // condition variable for the other player's turn
      otherPlayerTurn = gameLock.newCondition();      

      for ( int i = 0; i < 9; i++ )
         board[ i ] = new String( "" ); // create tic-tac-toe board
      players = new Player[ 2 ]; // create array of players
      currentPlayer = PLAYER_X; // set current player to first player
 
      try
      {
         server = new ServerSocket( 12345, 2 ); // set up ServerSocket
      } // end try
      catch ( IOException ioException ) 
      {
         ioException.printStackTrace();
         System.exit( 1 );
      } // end catch

      outputArea = new JTextArea(); // create JTextArea for output
      add( outputArea, BorderLayout.CENTER );
      outputArea.setText( "Server awaiting connections\n" );

      setSize( 300, 300 ); // set size of window
      setVisible( true ); // show window
   } // end TicTacToeServer constructor

   // wait for two connections so game can be played
   public void execute()
   {
      // wait for each client to connect
      for ( int i = 0; i < players.length; i++ ) 
      {
         try // wait for connection, create Player, start runnable
         {
            players[ i ] = new Player( server.accept(), i );
            runGame.execute( players[ i ] ); // execute player runnable
         } // end try
         catch ( IOException ioException ) 
         {
            ioException.printStackTrace();
            System.exit( 1 );
         } // end catch
      } // end for

      gameLock.lock(); // lock game to signal player X's thread

      try
      {
         players[ PLAYER_X ].setSuspended( false ); // resume player X
         otherPlayerConnected.signal(); // wake up player X's thread
      } // end try
      finally
      {
         gameLock.unlock(); // unlock game after signalling player X
      } // end finally
   } // end method execute
   
   // display message in outputArea
   private void displayMessage( final String messageToDisplay )
   {
      // display message from event-dispatch thread of execution
      SwingUtilities.invokeLater(
         new Runnable() 
         {
            public void run() // updates outputArea
            {
               outputArea.append( messageToDisplay ); // add message
            } // end  method run
         } // end inner class
      ); // end call to SwingUtilities.invokeLater
   } // end method displayMessage

   // determine if move is valid
   public boolean validateAndMove( int location, int player )
   {
      // while not current player, must wait for turn
      while ( player != currentPlayer ) 
      {
         gameLock.lock(); // lock game to wait for other player to go

         try 
         {
            otherPlayerTurn.await(); // wait for player's turn
         } // end try
         catch ( InterruptedException exception )
         {
            exception.printStackTrace();
         } // end catch
         finally
         {
            gameLock.unlock(); // unlock game after waiting
         } // end finally
      } // end while

      // if location not occupied, make move
     //to be moved ss
     if ( !isOccupied( location ) )
      {
         //****Edited Lines: Win/Draw Condition Check goes after THIS Line****
         //Checking for draw:         
         int empty = 0;
         for(int i = 0; i < board.length; i++) {
        	 if(board[i].equals("")) {
        		 empty++;
        	 }
         }
         winSwitch(location); //Check if current player has won. If any wins, triggers end of match
         if(matchWinner == false && empty == 0) {
        	 matchDraw = true;
         }
       //****End of edited lines****
       //to be moved ss
         currentPlayer = ( currentPlayer + 1 ) % 2; // change player

         // let new current player know that move occurred
         players[ currentPlayer ].otherPlayerMoved( location );

         gameLock.lock(); // lock game to signal other player to go

         try 
         {
            otherPlayerTurn.signal(); // signal other player to continue
         } // end try
         finally
         {
            gameLock.unlock(); // unlock game after signaling
         } // end finally

         return true; // notify player that move was valid
      } // end if
      else // move was not valid
         return false; // notify player that move was invalid
   } // end method validateAndMove

   // determine whether location is occupied
   public boolean isOccupied( int location )
   {
      if ( board[ location ].equals( MARKS[ PLAYER_X ] ) || 
         board [ location ].equals( MARKS[ PLAYER_O ] ) )
         return true; // location is occupied
      else
         return false; // location is not occupied
   } // end method isOccupied

   // place code in this method to determine whether game over 
   public boolean isGameOver()
   {
      return false; // this is left as an exercise
   } // end method isGameOver

   // private inner class Player manages each Player as a runnable
   private class Player implements Runnable 
   {
      private Socket connection; // connection to client
      private Scanner input; // input from client
      private Formatter output; // output to client
      private int playerNumber; // tracks which player this is
      private String mark; // mark for this player
      private boolean suspended = true; // whether thread is suspended

      // set up Player thread
      public Player( Socket socket, int number )
      {
         playerNumber = number; // store this player's number
         mark = MARKS[ playerNumber ]; // specify player's mark
         connection = socket; // store socket for client
         boolean winStatus;
         
         
         try // obtain streams from Socket
         {
            input = new Scanner( connection.getInputStream() );
            output = new Formatter( connection.getOutputStream() );
         } // end try
         catch ( IOException ioException ) 
         {
            ioException.printStackTrace();
            System.exit( 1 );
         } // end catch
      } // end Player constructor

      public void winCheck()
      {
    	  for (int i = 0; i < board.length; i++) 
    	  {
    		  if(  board[ i ].equals( MARKS[ PLAYER_X ] ) || 
    			         board [ i ].equals( MARKS[ PLAYER_O ] ) )
    			 {
    			  		if ( board[i+1].equals(MARKS[currentPlayer]))
    			  		{
    			  			if (board[i+2].equals(MARKS[currentPlayer]))
    			  			{
    			  				//Youwin
    			  			}
    			  		}
    			  		
    		  }
    		  
    	  }
      }
      // send message that other player moved
      public void otherPlayerMoved( int location )
      {
         output.format( "Opponent moved\n" );
         output.format( "%d\n", location ); // send location of move
         output.flush(); // flush output
      } // end method otherPlayerMoved

      // control thread's execution
      public void run()
      {
         // send client its mark (X or O), process messages from client
         try 
         {
            displayMessage( "Player " + mark + " connected\n" );
            output.format( "%s\n", mark ); // send player's mark
            output.flush(); // flush output

            // if player X, wait for another player to arrive
            if ( playerNumber == PLAYER_X ) 
            {
               output.format( "%s\n%s", "Player X connected",
                  "Waiting for another player\n" );
               output.flush(); // flush output

               gameLock.lock(); // lock game to  wait for second player

               try 
               {
                  while( suspended )
                  {
                     otherPlayerConnected.await(); // wait for player O
                  } // end while
               } // end try 
               catch ( InterruptedException exception ) 
               {
                  exception.printStackTrace();
               } // end catch
               finally
               {
                  gameLock.unlock(); // unlock game after second player
               } // end finally

               // send message that other player connected
               output.format( "Other player connected. Your move.\n" );
               output.flush(); // flush output
            } // end if
            else
            {
               output.format( "Player O connected, please wait\n" );
               output.flush(); // flush output
            } // end else

            // while game not over
            while ( !isGameOver() ) 
            {
               int location = 0; // initialize move location

               if ( input.hasNext() )
                  location = input.nextInt(); // get move location

               // check for valid move
               if ( validateAndMove( location, playerNumber ) ) 
               {
                  displayMessage( "\nlocation: " + location );
                  output.format( "Valid move.\n" ); // notify client
                  output.flush(); // flush output
               } // end if
               else // move was invalid
               {
                  output.format( "Invalid move, try again\n" );
                  output.flush(); // flush output
               } // end else
            } // end while
         } // end try
         finally
         {
            try
            {
               connection.close(); // close connection to client
            } // end try
            catch ( IOException ioException ) 
            {
               ioException.printStackTrace();
               System.exit( 1 );
            } // end catch
         } // end finally
      } // end method run
     // Start a new game
         void newGame1(char winner) {
           repaint();

           // Announce result of last game.  Ask user to play again.
           String result;
           int draws = 0;
		int losses = 0;
		int wins = 0;
		if (winner==O) {
             ++wins;
             result = "You Win!";
           }
           else if (winner==X) {
             ++losses;
             result = "I Win!";
           }
           else {
             result = "Tie";
             ++draws;
           }
           if (JOptionPane.showConfirmDialog(null, 
               "You have "+wins+ " wins, "+losses+" losses, "+draws+" draws\n"
               +"Play again?", result, JOptionPane.YES_NO_OPTION)
               !=JOptionPane.YES_OPTION) {
             wins=losses=draws=0;
           }
           }
      // set whether or not thread is suspended
      public void setSuspended( boolean status )
      {
         suspended = status; // set value of suspended
      } // end method setSuspended
   } // end class Player
   //Test win conditions method--Added code
 // to be moved ss
 public void winSwitch(int location) { //To be used in a for loop checking the winning condition
	   switch(location) {
		   case 0:
		   {
			   //Adjacent
			   if(board[location+1].equals((MARKS[currentPlayer]))) {
				   if(board[location+2].equals((MARKS[currentPlayer]))) {
					   //set winning boolean to true/announce to player
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   //Below
			   else if (board[location+3].equals((MARKS[currentPlayer]))){
				   if(board[location+6].equals((MARKS[currentPlayer]))) {
					   //set winning boolean in currentPlayer to true(Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   //Diagnol(center)
			   else if (board[location+4].equals((MARKS[currentPlayer]))){
				   if(board[location+8].equals(MARKS[currentPlayer])) {
					   //set winning boolean in currentPlayer to true (Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   break;
		   }
		   case 1:
		   {
			   //Adjacent
			   if(board[location+1].equals((MARKS[currentPlayer]))) {
				   if(board[location-1].equals((MARKS[currentPlayer]))) {
					   //set winning boolean in currentPlayer to true (Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   //Below(Center)
			   else if (board[location+3].equals((MARKS[currentPlayer]))){
				   if(board[location+6].equals((MARKS[currentPlayer]))) {
					   //set winning boolean in currentPlayer to true(Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   //Adjacent(Behind)
			   else if (board[location-1].equals((MARKS[currentPlayer]))){
				   if(board[location+1].equals(MARKS[currentPlayer])) {
					   //set winning boolean in currentPlayer to true (Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   break;
		   }
		   case 2:
		   {
			   //Diagnol(Center)
			   if(board[location+2].equals((MARKS[currentPlayer]))) {
				   if(board[location-2].equals((MARKS[currentPlayer]))) {
					   //set winning boolean in currentPlayer to true (Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   //Below
			   else if (board[location+3].equals((MARKS[currentPlayer]))){
				   if(board[location+6].equals((MARKS[currentPlayer]))) {
					   //set winning boolean in currentPlayer to true(Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   //Adjacent
			   else if (board[location-1].equals((MARKS[currentPlayer]))){
				   if(board[location-2].equals(MARKS[currentPlayer])) {
					   //set winning boolean in currentPlayer to true (Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   break;
		   }
		   case 3:
		   {
			   //Adjacent
			   if(board[location+1].equals((MARKS[currentPlayer]))) {
				   if(board[location+2].equals((MARKS[currentPlayer]))) {
					   //set winning boolean in currentPlayer to true (Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   //Below
			   else if (board[location + 3].equals((MARKS[currentPlayer]))){
				   if(board[location - 3].equals((MARKS[currentPlayer]))) {
					   //set winning boolean in currentPlayer to true(Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   //Above
			   else if (board[location -3].equals((MARKS[currentPlayer]))){
				   if(board[location + 3].equals(MARKS[currentPlayer])) {
					   //set winning boolean in currentPlayer to true (Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   break;
		   }
		   //Center, more checks than others
		   case 4:
		   {
			   //Adjacent
			   if(board[location+1].equals((MARKS[currentPlayer]))) {
				   if(board[location -1].equals((MARKS[currentPlayer]))) {
					   //set winning boolean in currentPlayer to true (Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   //Below
			   else if (board[location+3].equals((MARKS[currentPlayer]))){
				   if(board[location-3].equals((MARKS[currentPlayer]))) {
					   //set winning boolean in currentPlayer to true(Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   //Diagnol(Below)
			   else if (board[location+4].equals((MARKS[currentPlayer]))){
				   if(board[location-4].equals(MARKS[currentPlayer])) {
					   //set winning boolean in currentPlayer to true (Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
				   break;
			   }
			   //Adjacent(Behind)
			   else if(board[location - 1].equals((MARKS[currentPlayer]))) {
				   if(board[location + 1].equals((MARKS[currentPlayer]))) {
					   //set winning boolean in currentPlayer to true (Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   //Above
			   else if (board[location-3].equals((MARKS[currentPlayer]))){
				   if(board[location+3].equals((MARKS[currentPlayer]))) {
					   //set winning boolean in currentPlayer to true(Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   //Diagnol(Above)
			   else if (board[location-4].equals((MARKS[currentPlayer]))){
				   if(board[location+4].equals(MARKS[currentPlayer])) {
					   //set winning boolean in currentPlayer to true (Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   break;
		   }
		   case 5:
		   {
			   //Adjacent
			   if(board[location-1].equals((MARKS[currentPlayer]))) {
				   if(board[location-2].equals((MARKS[currentPlayer]))) {
					   //set winning boolean in currentPlayer to true (Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   //Below
			   else if (board[location+3].equals((MARKS[currentPlayer]))){
				   if(board[location-3].equals((MARKS[currentPlayer]))) {
					   //set winning boolean in currentPlayer to true(Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   //Above
			   else if (board[location-3].equals((MARKS[currentPlayer]))){
				   if(board[location+3].equals(MARKS[currentPlayer])) {
					   //set winning boolean in currentPlayer to true (Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   break;
		   }
		   case 6:
		   {
			   //Adjacent
			   if(board[location+1].equals((MARKS[currentPlayer]))) {
				   if(board[location+2].equals((MARKS[currentPlayer]))) {
					   //set winning boolean in currentPlayer to true (Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   //Above
			   else if (board[location-3].equals((MARKS[currentPlayer]))){
				   if(board[location-6].equals((MARKS[currentPlayer]))) {
					   //set winning boolean in currentPlayer to true(Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   //Diagnol
			   else if (board[location-2].equals((MARKS[currentPlayer]))){
				   if(board[location-4].equals(MARKS[currentPlayer])) {
					   //set winning boolean in currentPlayer to true (Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   break;
		   }
		   case 7:
		   {
			   //Adjacent
			   if(board[location+1].equals((MARKS[currentPlayer]))) {
				   if(board[location-1].equals((MARKS[currentPlayer]))) {
					   //set winning boolean in currentPlayer to true (Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   //Above(Center)
			   else if (board[location-3].equals((MARKS[currentPlayer]))){
				   if(board[location-6].equals((MARKS[currentPlayer]))) {
					   //set winning boolean in currentPlayer to true(Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
				   break;
			   }
			   //Adjacent(Behind)
			   else if (board[location-1].equals((MARKS[currentPlayer]))){
				   if(board[location+1].equals(MARKS[currentPlayer])) {
					   //set winning boolean in currentPlayer to true (Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   break;
		   }
		   case 8:
		   {
			   //Adjacent
			   if(board[location-1].equals((MARKS[currentPlayer]))) {
				   if(board[location-2].equals((MARKS[currentPlayer]))) {
					   //set winning boolean in currentPlayer to true (Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   //Above
			   else if (board[location-3].equals((MARKS[currentPlayer]))){
				   if(board[location-6].equals((MARKS[currentPlayer]))) {
					   //set winning boolean in currentPlayer to true(Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   //Diagnol(Center)
			   else if (board[location-4].equals((MARKS[currentPlayer]))){
				   if(board[location-8].equals(MARKS[currentPlayer])) {
					   //set winning boolean in currentPlayer to true (Part D)
					   System.out.println( "Player " + MARKS[currentPlayer] + " has won!\n" );
					   matchWinner = true;
					   //end game
					   break;
				   }
			   }
			   break;
		   }
	   } //end of switch
   } //end of winSwitch
   //to be moved ss
} // end class TicTacToeServer

/**************************************************************************
 * (C) Copyright 1992-2012 by Deitel & Associates, Inc. and               *
 * Pearson Education, Inc. All Rights Reserved.                           *
 *                                                                        *
 * DISCLAIMER: The authors and publisher of this book have used their     *
 * best efforts in preparing the book. These efforts include the          *
 * development, research, and testing of the theories and programs        *
 * to determine their effectiveness. The authors and publisher make       *
 * no warranty of any kind, expressed or implied, with regard to these    *
 * programs or to the documentation contained in these books. The authors *
 * and publisher shall not be liable in any event for incidental or       *
 * consequential damages in connection with, or arising out of, the       *
 * furnishing, performance, or use of these programs.                     *
 *************************************************************************/

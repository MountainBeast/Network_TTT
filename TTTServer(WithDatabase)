// Fig. 27.13: TicTacToeServer.java
// Server side of client/server Tic-Tac-Toe program.
import java.awt.BorderLayout;
import java.net.ServerSocket;
import java.net.Socket;
import java.io.IOException;
import java.util.Formatter;
import java.util.InputMismatchException;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import javax.swing.JFrame;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;

public class TicTacToeServer extends JFrame 
{
   private String[] board = new String[ 9 ]; // tic-tac-toe board
   private JTextArea outputArea; // for outputting moves
   private Player[] players; // array of Players
   private ServerSocket server; // server socket to connect with clients
   private int currentPlayer; // keeps track of player with current move
   private final static int PLAYER_X = 0; // constant for first player
   private final static int PLAYER_O = 1; // constant for second player
   private final static String[] MARKS = { "X", "O" }; // array of marks
   private ExecutorService runGame; // will run players
   private Lock gameLock; // to lock game for synchronization
   private Condition otherPlayerConnected; // to wait for other player
   private Condition otherPlayerTurn; // to wait for other player's turn
   //***Edited: Added booleans/attributes below*** - DKC
   private boolean matchWinner;
   private boolean matchDraw;
   private int winningPlayer = PLAYER_X; //initialized to player X for initialization purposes
   private boolean XNewGame;
   private boolean ONewGame;
   // set up tic-tac-toe server and GUI that displays messages
   public TicTacToeServer()
   {
      super( "Tic-Tac-Toe Server" ); // set title of window

      // create ExecutorService with a thread for each player
      runGame = Executors.newFixedThreadPool( 2 );
      gameLock = new ReentrantLock(); // create lock for game

      // condition variable for both players being connected
      otherPlayerConnected = gameLock.newCondition();

      // condition variable for the other player's turn
      otherPlayerTurn = gameLock.newCondition();      

      for ( int i = 0; i < 9; i++ )
         board[ i ] = new String( "" ); // create tic-tac-toe board
      players = new Player[ 2 ]; // create array of players
      currentPlayer = PLAYER_X; // set current player to first player
 
      try
      {
         server = new ServerSocket( 12345, 2 ); // set up ServerSocket
      } // end try
      catch ( IOException ioException ) 
      {
         ioException.printStackTrace();
         System.exit( 1 );
      } // end catch

      outputArea = new JTextArea(); // create JTextArea for output
      add( outputArea, BorderLayout.CENTER );
      outputArea.setText( "Server awaiting connections\n" );

      setSize( 300, 300 ); // set size of window
      setVisible( true ); // show window
   } // end TicTacToeServer constructor

   // wait for two connections so game can be played
   public void execute()
   {
      // wait for each client to connect
      for ( int i = 0; i < players.length; i++ ) 
      {
         try // wait for connection, create Player, start runnable
         {
            players[ i ] = new Player( server.accept(), i );
            runGame.execute( players[ i ] ); // execute player runnable
         } // end try
         catch ( IOException ioException ) 
         {
            ioException.printStackTrace();
            System.exit( 1 );
         } // end catch
      } // end for
      gameLock.lock(); // lock game to signal player X's thread

      try
      {
         players[ PLAYER_X ].setSuspended( false ); // resume player X
         otherPlayerConnected.signal(); // wake up player X's thread
      } // end try
      finally
      {
         gameLock.unlock(); // unlock game after signalling player X
      } // end finally
      //Added, testing something
   } // end method execute
   
   // display message in outputArea
   private void displayMessage( final String messageToDisplay )
   {
      // display message from event-dispatch thread of execution
      SwingUtilities.invokeLater(
         new Runnable() 
         {
            public void run() // updates outputArea
            {
               outputArea.append( messageToDisplay ); // add message
            } // end  method run
         } // end inner class
      ); // end call to SwingUtilities.invokeLater
   } // end method displayMessage

   // determine if move is valid
   public boolean validateAndMove( int location, int player )
   {
      // while not current player, must wait for turn
      while ( player != currentPlayer ) 
      {
         gameLock.lock(); // lock game to wait for other player to go

         try 
         {
            otherPlayerTurn.await(); // wait for player's turn
         } // end try
         catch ( InterruptedException exception )
         {
            exception.printStackTrace();
         } // end catch
         finally
         {
            gameLock.unlock(); // unlock game after waiting
         } // end finally
      } // end while

      // if location not occupied, make move
      if ( !isOccupied( location ) )
      {
         board[ location ] = MARKS[ currentPlayer ]; // set move on board
         currentPlayer = ( currentPlayer + 1 ) % 2; // change player

         // let new current player know that move occurred
         players[ currentPlayer ].otherPlayerMoved( location );

         gameLock.lock(); // lock game to signal other player to go

         try 
         {
            otherPlayerTurn.signal(); // signal other player to continue
         } // end try
         finally
         {
            gameLock.unlock(); // unlock game after signaling
         } // end finally

         return true; // notify player that move was valid
      } // end if
      else // move was not valid
         return false; // notify player that move was invalid
   } // end method validateAndMove

   // determine whether location is occupied
   public boolean isOccupied( int location )
   {
      if ( board[ location ].equals( MARKS[ PLAYER_X ] ) || 
         board [ location ].equals( MARKS[ PLAYER_O ] ) )
         return true; // location is occupied
      else
         return false; // location is not occupied
   } // end method isOccupied

   // place code in this method to determine whether game over 
   public boolean isGameOver()
   {
	   for(int i = 0; i < board.length; i++) {
		   if(board[i].equals(MARKS[PLAYER_X])) {
			   winSwitch(i, PLAYER_X);
		   }
	   }
	   //Check X wins
	   if(matchWinner == true) {
		   winningPlayer = PLAYER_X;
		   //Announce results to players
		   return true;
	   }
	   else {
		   //Check if O has any win conditions
		   for(int i = 0; i < board.length; i++) {
			   if(board[i].equals(MARKS[PLAYER_O])) {
				   winSwitch(i, PLAYER_O);
			   }
		   }
		   if(matchWinner == true) {
			   winningPlayer = PLAYER_O;
			   return true;
		   }
	   }//
	   //Check for draw
	   int empty = 0;
	   for(int i = 0; i < board.length; i++) {
		   if(board[i].equals("")) {
			   empty++;
		   }
	   }
	   if(matchWinner == false && empty == 0) { //draw condition, no player wins
		   matchDraw = true;
		   return true;
	   }
	  //****END EDITED CODE****
      return false; // this is left as an exercise
   } // end method isGameOver

   // private inner class Player manages each Player as a runnable
   private class Player implements Runnable 
   {
      private Socket connection; // connection to client
      private Scanner input; // input from client
      private Formatter output; // output to client
      private int playerNumber; // tracks which player this is
      private String mark; // mark for this player
      private boolean suspended = true; // whether thread is suspended
      private boolean newGame = false; //reset with every new game

      // set up Player thread
      public Player( Socket socket, int number )
      {
         playerNumber = number; // store this player's number
         mark = MARKS[ playerNumber ]; // specify player's mark
         connection = socket; // store socket for client
         
         try // obtain streams from Socket
         {
            input = new Scanner( connection.getInputStream() );
            output = new Formatter( connection.getOutputStream() );
         } // end try
         catch ( IOException ioException ) 
         {
            ioException.printStackTrace();
            System.exit( 1 );
         } // end catch
      } // end Player constructor

      // send message that other player moved
      public void otherPlayerMoved( int location )
      {
         output.format( "Opponent moved\n" );
         output.format( "%d\n", location ); // send location of move
         output.flush(); // flush output
      } // end method otherPlayerMoved
      //send if message is a win
      public void winMessage() {
    	  output.format("Player "+ MARKS[winningPlayer] + " has won!" + "\n");
    	  output.flush();
      }
      public void drawMessage() {
    	  output.format("Draw! Neither player wins!" + "\n");
    	  output.flush();
      }
      public boolean getNewGame() {
    	  return newGame;
      }
      // control thread's execution
      public void run()
      {
         // send client its mark (X or O), process messages from client
         try 
         {
            displayMessage( "Player X connected\n" );
            output.format( "%s\n", mark ); // send player's mark
            output.flush(); // flush output

            // if player X, wait for another player to arrive
            if ( playerNumber == PLAYER_X ) //originally Player_X
            {
               output.format( "%s\n%s", "Player X connected",
                  "Waiting for another player\n" );
               output.flush(); // flush output

               gameLock.lock(); // lock game to  wait for second player

               try 
               {
                  while( suspended )
                  {
                     otherPlayerConnected.await(); // wait for player O
                  } // end while
               } // end try 
               catch ( InterruptedException exception ) 
               {
                  exception.printStackTrace();
               } // end catch
               finally
               {
                  gameLock.unlock(); // unlock game after second player
               } // end finally

               // send message that other player connected
               output.format( "Other player connected. Your move.\n" );
               output.flush(); // flush output
            } // end if
            else
            {
               output.format( "Player O connected, please wait\n" );
               output.flush(); // flush output
            } // end else

            // while game not over
            while ( !isGameOver() ) 
            {
               int location = 0; // initialize move location
               boolean isNum = false;
               synchronized(this) {
               while(!isNum) {
	               if ( input.hasNext() ) //create a check to obtain numbers only
	            	  try {
		                  location = input.nextInt(); // get move location. This DOES NOT consume a newline
		                  isNum = true; //break the while loop
	            	  }
	               	  catch(InputMismatchException e){
	               		  isNum = false;
	               	  }
               		}
               }

               // check for valid move
               if(matchWinner == false && matchDraw == false) {
	               if ( validateAndMove( location, playerNumber ) ) 
	               {
	                  displayMessage( "\nlocation: " + location );
	                  output.format( "Valid move.\n" ); // notify client
	                  output.flush(); // flush output
	               } // end inner if
	               else // move was invalid
	               {
	                  output.format( "Invalid move, try again\n" );
	                  output.flush(); // flush output
	               } // end inner else
               } //end outer if
               else {
            	   gameLock.lock();
            	   output.format("Game is over" + "\n");
            	   output.flush();
            	   gameLock.unlock();
            	   //currentPlayer = (currentPlayer + 1) % 2;
               } //end outer else
            } // end while
         } // end try
         finally
         {
        	gameLock.lock();
        	newGame = false; //reset newGame
        	//gameLock currently is unlocked/unowned. Give lock back to Player X
        	System.out.println("Winning Player is: " + MARKS[winningPlayer]);
        	System.out.println("Current Player: " + MARKS[playerNumber]);
        	winMessage();
        	gameLock.unlock();
        	//Maybe put a gameLock here
        	//Reset new game variables here
        	//Trying something
	        	if(input.hasNext()) {
		        	while(!input.nextLine().equals("Yes")) {
		        		System.out.println("Extra Input"); //for testing purposes.
		        	}
        		}
        	System.out.println("Game has exited while loop");
        	newGame = true; //just a blanket shading for now
        	System.out.println(MARKS[playerNumber] + " wants a new game!");
        	/*//resets board on server side. Forcing the synchronization is a different story
	        	}*/
        	//resets board serverside. The runGame execute will launch for the player's choice of who they want (Part D) X always goes first
        	if (currentPlayer == 2) { //will never hit due to how currentPlayer functions
            try
	            {
	               output.format("Connection is closing for player " + mark + "\n");
	               output.flush();
	               connection.close(); // close connection to client
	            } // end try
	            catch ( IOException ioException ) 
	            {
	               ioException.printStackTrace();
	               System.exit( 1 );
	            } // end catch
        	}
         } // end finally
         //Reset game variables and call runnable here
         if(players[playerNumber].getNewGame() == true) { //it's sort of working here. we will puzzle it out later
        	if(players[(playerNumber + 1) % 2].getNewGame() == true) {
	           	matchWinner = false;
	           	matchDraw = false;
	           	newGame = false;
	           	players[winningPlayer].setSuspended(false); //trying something
	           	for(int j = 0; j < board.length; j++) {
	           		board[j] = "";
	           	}
	           	if(currentPlayer != PLAYER_X) {
	           		currentPlayer = (currentPlayer + 1) % 2;
	           	}
	           		displayMessage("\n");
	           		for(int i = 0; i < players.length; i++) {
	           			runGame.execute(players[i]);
	           	}
           }
        }
      } // end method run

      // set whether or not thread is suspended
      public void setSuspended( boolean status )
      {
         suspended = status; // set value of suspended
      } // end method setSuspended
   } // end class Player
   //Test method to control win condition stuff
   //WinSwitch method begins
   public void winSwitch(int location, int currMark) { //To be used in a for loop checking the winning condition
	   switch(location) {
		   case 0:
		   {
			   //Adjacent
			   if(board[location+1].equals((MARKS[currMark])) && board[location+2].equals((MARKS[currMark]))) {
					   matchWinner = true;
					   //end game
					   break;
				   }
			   //Below
			   else if (board[location+3].equals((MARKS[currMark])) && board[location+6].equals((MARKS[currMark]))){
					   //set winning boolean in currentPlayer to true(Part D)
					   matchWinner = true;
					   //end game
					   break;
			   }
			   //Diagnol(center)
			   else if (board[location+4].equals((MARKS[currMark])) && board[location+8].equals(MARKS[currMark])){
					   //set winning boolean in currMark to true (Part D)
					   matchWinner = true;
					   //end game
					   break;
			   }
			   else {
				   break; //if none match, break switch
			   }
		   }
		   case 1:
		   {
			   //Adjacent
			   if(board[location+1].equals((MARKS[currMark])) && board[location-1].equals((MARKS[currMark]))) {
					   matchWinner = true;
					   //end game
					   break;
				   }
			   //Below
			   else if (board[location+3].equals((MARKS[currMark])) && board[location+6].equals((MARKS[currMark]))){
					   matchWinner = true;
					   //end game
					   break;
				   }
			   else {
				   break; //if none match, break switch
			   }
		   }
		   case 2:
		   {
			   //Adjacent
			   if(board[location-1].equals((MARKS[currMark])) && board[location-2].equals((MARKS[currMark]))) {
					   matchWinner = true;
					   //end game
					   break;
				   }
			   //Below
			   else if (board[location+3].equals((MARKS[currMark])) && board[location+6].equals((MARKS[currMark]))){
					   //set winning boolean in currentPlayer to true(Part D)
					   matchWinner = true;
					   //end game
					   break;
			   }
			   //Diagnol(center)
			   else if (board[location+2].equals((MARKS[currMark])) && board[location+4].equals(MARKS[currMark])){
					   //set winning boolean in currMark to true (Part D)
					   matchWinner = true;
					   //end game
					   break;
			   }
			   else {
				   break; //if none match, break switch
			   }
		   }
		   case 3:
		   {
			   //Adjacent
			   if(board[location+1].equals((MARKS[currMark])) && board[location+2].equals((MARKS[currMark]))) {
					   matchWinner = true;
					   //end game
					   break;
				   }
			   //Below
			   else if (board[location-3].equals((MARKS[currMark])) && board[location+3].equals((MARKS[currMark]))){
					   //set winning boolean in currentPlayer to true(Part D)
					   matchWinner = true;
					   //end game
					   break;
			   }
			   else {
				   break; //if none match, break switch
			   }
		   }
		   //Center, more checks than others
		   case 4:
		   {
			   //Adjacent
			   if(board[location-1].equals((MARKS[currMark])) && board[location+1].equals((MARKS[currMark]))) {
					   matchWinner = true;
					   //end game
					   break;
				   }
			   //Below
			   else if (board[location+3].equals((MARKS[currMark])) && board[location-3].equals((MARKS[currMark]))){
					   //set winning boolean in currentPlayer to true(Part D)
					   matchWinner = true;
					   //end game
					   break;
			   }
			   //Diagnol(left)
			   else if (board[location-4].equals((MARKS[currMark])) && board[location +4].equals(MARKS[currMark])){
					   //set winning boolean in currMark to true (Part D)
					   matchWinner = true;
					   //end game
					   break;
			   }
			   //Diagnol(right)
			   else if(board[location-2].equals((MARKS[currMark])) && board[location+2].equals((MARKS[currMark]))){
				   matchWinner = true;
				   //end game
				   break;
			   }
			   else {
				   break; //if none match, break switch
			   }
		   }
		   case 5:
		   {
			   //Adjacent
			   if(board[location-1].equals((MARKS[currMark])) && board[location-2].equals((MARKS[currMark]))) {
					   matchWinner = true;
					   //end game
					   break;
				   }
			   //Below
			   else if (board[location+3].equals((MARKS[currMark])) && board[location-3].equals((MARKS[currMark]))){
					   //set winning boolean in currentPlayer to true(Part D)
					   matchWinner = true;
					   //end game
					   break;
			   }
			   else {
				   break; //if none match, break switch
			   }
		   }
		   case 6:
		   {
			   //Adjacent
			   if(board[location+1].equals((MARKS[currMark])) && board[location+2].equals((MARKS[currMark]))) {
					   matchWinner = true;
					   //end game
					   break;
				   }
			   //Above
			   else if (board[location-3].equals((MARKS[currMark])) && board[location-6].equals((MARKS[currMark]))){
					   //set winning boolean in currentPlayer to true(Part D)
					   matchWinner = true;
					   //end game
					   break;
			   }
			   //Diagnol(center)
			   else if (board[location-2].equals((MARKS[currMark])) && board[location-4].equals(MARKS[currMark])){
					   //set winning boolean in currMark to true (Part D)
					   matchWinner = true;
					   //end game
					   break;
			   }
			   else {
				   break; //if none match, break switch
			   }
		   }
		   case 7:
		   {
			   //Adjacent
			   if(board[location+1].equals((MARKS[currMark])) && board[location-1].equals((MARKS[currMark]))) {
					   matchWinner = true;
					   //end game
					   break;
				   }
			   //Above
			   else if (board[location-3].equals((MARKS[currMark])) && board[location-6].equals((MARKS[currMark]))){
					   //set winning boolean in currentPlayer to true(Part D)
					   matchWinner = true;
					   //end game
					   break;
			   }
			   else {
				   break; //if none match, break switch
			   }
		   }
		   case 8:
		   {
			   //Adjacent
			   if(board[location-1].equals((MARKS[currMark])) && board[location-2].equals((MARKS[currMark]))) {
					   matchWinner = true;
					   //end game
					   break;
				   }
			   //Above
			   else if (board[location-3].equals((MARKS[currMark])) && board[location-6].equals((MARKS[currMark]))){
					   //set winning boolean in currentPlayer to true(Part D)
					   matchWinner = true;
					   //end game
					   break;
			   }
			   //Diagnol(center)
			   else if (board[location-4].equals((MARKS[currMark])) && board[location-8].equals(MARKS[currMark])){
					   //set winning boolean in currMark to true (Part D)
					   matchWinner = true;
					   //end game
					   break;
			   }
			   else {
				   break; //if none match, break switch
			   }
		   }
	   } //end of switch
} //end of winSwitch
} // end class TicTacToeServer

/**************************************************************************
 * (C) Copyright 1992-2012 by Deitel & Associates, Inc. and               *
 * Pearson Education, Inc. All Rights Reserved.                           *
 *                                                                        *
 * DISCLAIMER: The authors and publisher of this book have used their     *
 * best efforts in preparing the book. These efforts include the          *
 * development, research, and testing of the theories and programs        *
 * to determine their effectiveness. The authors and publisher make       *
 * no warranty of any kind, expressed or implied, with regard to these    *
 * programs or to the documentation contained in these books. The authors *
 * and publisher shall not be liable in any event for incidental or       *
 * consequential damages in connection with, or arising out of, the       *
 * furnishing, performance, or use of these programs.                     *
 *************************************************************************/
